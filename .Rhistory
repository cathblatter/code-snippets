set.seed(1234)
# sample dfs
data_0 <- tibble::tibble("X1" = sample(c(1, 2, 3, 4, NA_real_), 8, T),
"X2" = sample(c(100, 200, 300, 400, NA_real_), 8, T),
"X3" = sample(c("m", "f"), 8, T),
"tp" = "0") # timepoint
data_1 <- tibble::tibble("X1" = sample(c(100, 200, 300, 400, NA_real_), 8, T),
"X3" = sample(c(1, 2, 3, 4, NA_real_), 8, T),
"tp" = "1",
"X2" = sample(c("m", "f"), 8, T))
data_2 <- tibble::tibble("X3" = sample(c(1, 2, 3, 4, NA_real_), 8, T),
"X4" = sample(c("m", "f"), 8, T),
"tp" = "2")
# create df with matching variable names
var_names <- tibble::tibble(real_name = c("var1", "var2_salary", "var3_gender"),
name_0 = c("X1", "X2", "X3"),
name_1 = c("X3", "X1", "X2"),
name_2 = c("X3", NA_character_, "X4"))
# prepare the renaming -vectors
name_0 <- pull(var_names, name_0)
name_1 <- pull(var_names, name_1)
name_2 <- pull(var_names, name_2)
real_names <- pull(var_names, real_name)
# merge the dataframes and create a combined df
map2_dfr(list(data_0, data_1, data_2), list(name_0, name_1, name_2), function(tdf, names) {
real_names <- real_names[!is.na(names)]
names <- keep(names, function(v) !is.na(v))
tdf %>%
rename(!!!rlang::syms(set_names(names, real_names)))
}) -> comb_data
# create df with matching variable names
var_names2 <-
tibble::tibble(to = c("var1", "var2_salary", "var3_gender"),
data_0    = c("X1", "X2", "X3"),
data_1    = c("X3", "X1", "X2"),
data_2    = c("X3", NA_character_, "X4")) %>%
pivot_longer(-to, names_to = "source", values_to = "from") %>%
select(source, from, to)
var_names %>%
rename(to = 1) %>%
pivot_longer(-to, names_to = "source", values_to = "from") %>%
select(source, from, to) -> var_names
data_list <- list(data_0 = data_0, data_1 = data_1, data_2 = data_2)
rename_cols <- function(.data, from, to) {
dplyr::rename(.data, !!!rlang::syms(discard(set_names(from, to), is.na(from))))
}
table_cols <- function(.data, cols, ...) {
purrr::map(cols, ~table(.data[[.x]]), ...)
}
#
remapped <-
enframe(data_list, name = "source", value = "data") %>%
mutate(mapping = map(source, ~filter(var_names2, source == .))) %>%
hoist(mapping, from = "from", to = "to") %>%
mutate(output       = pmap(list(data, from, to), rename_cols),
data_table   = map2(data, from, table_cols, useNA = "always"),
output_table = map2(output, to, table_cols, useNA = "always"),
validate     = map2_lgl(data_table, output_table, identical))
enframe(data_list, name = "source", value = "data")
enframe(data_list, name = "source", value = "data") %>%
mutate(mapping = map(source, ~filter(var_names2, source == .)))
enframe(data_list, name = "source", value = "data") %>%
mutate(mapping = map(source, ~filter(var_names2, source == .))) %>%
hoist(mapping, from = "from", to = "to")
#
remapped <-
enframe(data_list, name = "source", value = "data") %>%
mutate(mapping = map(source, ~filter(var_names2, source == .))) %>%
hoist(mapping, from = "from", to = "to") %>%
mutate(output       = pmap(list(data, from, to), rename_cols)),
data_table   = map2(data, from, table_cols, useNA = "always"),
output_table = map2(output, to, table_cols, useNA = "always"),
validate     = map2_lgl(data_table, output_table, identical))
enframe(data_list, name = "source", value = "data") %>%
mutate(mapping = map(source, ~filter(var_names2, source == .))) %>%
hoist(mapping, from = "from", to = "to") %>%
mutate(output       = pmap(list(data, from, to), rename_cols))
enframe(data_list, name = "source", value = "data") %>%
mutate(mapping = map(source, ~filter(var_names2, source == .))) %>%
hoist(mapping, from = "from", to = "to") %>%
mutate(output       = pmap(list(data, from, to), rename_cols),
data_table   = map2(data, from, table_cols, useNA = "always"))
#
#
#
#
# remapped %>% select(output) %>% unnest(cols = c(output))
sessioninfo::session_info()
devtools::install_version("purrr", version = '0.3.3')
devtools::install_version("purrr", version = '0.3.3', repos = "https://cloud.r-project.org")
devtools::install_version("purr", version = '0.3.3', repos = "https://cloud.r-project.org")
devtools::install_version('purrr', version = '0.3.3', repos = "https://cloud.r-project.org")
devtools::install_version('purrr', version = '0.3.3', repos = "https://cran.us.r-project.org")
remove.packages("purrr")
devtools::install_version('purrr', version = '0.3.3', repos = "https://cran.us.r-project.org")
devtools::install_version('purrr', version = '0.3.3', repos = "https://cran.r-project.org")
library(tidyverse)
set.seed(1234)
# sample dfs
data_0 <- tibble::tibble("X1" = sample(c(1, 2, 3, 4, NA_real_), 8, T),
"X2" = sample(c(100, 200, 300, 400, NA_real_), 8, T),
"X3" = sample(c("m", "f"), 8, T),
"tp" = "0") # timepoint
data_1 <- tibble::tibble("X1" = sample(c(100, 200, 300, 400, NA_real_), 8, T),
"X3" = sample(c(1, 2, 3, 4, NA_real_), 8, T),
"tp" = "1",
"X2" = sample(c("m", "f"), 8, T))
data_2 <- tibble::tibble("X3" = sample(c(1, 2, 3, 4, NA_real_), 8, T),
"X4" = sample(c("m", "f"), 8, T),
"tp" = "2")
# create df with matching variable names
var_names <- tibble::tibble(real_name = c("var1", "var2_salary", "var3_gender"),
name_0 = c("X1", "X2", "X3"),
name_1 = c("X3", "X1", "X2"),
name_2 = c("X3", NA_character_, "X4"))
# prepare the renaming -vectors
name_0 <- pull(var_names, name_0)
name_1 <- pull(var_names, name_1)
name_2 <- pull(var_names, name_2)
real_names <- pull(var_names, real_name)
# merge the dataframes and create a combined df
map2_dfr(list(data_0, data_1, data_2), list(name_0, name_1, name_2), function(tdf, names) {
real_names <- real_names[!is.na(names)]
names <- keep(names, function(v) !is.na(v))
tdf %>%
rename(!!!rlang::syms(set_names(names, real_names)))
}) -> comb_data
# create df with matching variable names
var_names2 <-
tibble::tibble(to = c("var1", "var2_salary", "var3_gender"),
data_0    = c("X1", "X2", "X3"),
data_1    = c("X3", "X1", "X2"),
data_2    = c("X3", NA_character_, "X4")) %>%
pivot_longer(-to, names_to = "source", values_to = "from") %>%
select(source, from, to)
var_names %>%
rename(to = 1) %>%
pivot_longer(-to, names_to = "source", values_to = "from") %>%
select(source, from, to) -> var_names
data_list <- list(data_0 = data_0, data_1 = data_1, data_2 = data_2)
rename_cols <- function(.data, from, to) {
dplyr::rename(.data, !!!rlang::syms(discard(set_names(from, to), is.na(from))))
}
table_cols <- function(.data, cols, ...) {
purrr::map(cols, ~table(.data[[.x]]), ...)
}
#
remapped <-
enframe(data_list, name = "source", value = "data") %>%
mutate(mapping = map(source, ~filter(var_names2, source == .))) %>%
hoist(mapping, from = "from", to = "to") %>%
mutate(output       = pmap(list(data, from, to), rename_cols),
data_table   = map2(data, from, table_cols, useNA = "always"))#,
#
remapped <-
enframe(data_list, name = "source", value = "data") %>%
mutate(mapping = map(source, ~filter(var_names2, source == .))) %>%
hoist(mapping, from = "from", to = "to") %>%
mutate(output       = pmap(list(data, from, to), rename_cols),
data_table   = map2(data, from, table_cols, useNA = "always"),
output_table = map2(output, to, table_cols, useNA = "always"),
validate     = map2_lgl(data_table, output_table, identical))
enframe(data_list, name = "source", value = "data") %>%
mutate(mapping = map(source, ~filter(var_names2, source == .))) %>%
hoist(mapping, from = "from", to = "to") %>%
mutate(output       = pmap(list(data, from, to), rename_cols),
# data_table   = map2(data, from, table_cols, useNA = "always"),
output_table = map2(output, to, table_cols, useNA = "always"))
#
remapped <-
enframe(data_list, name = "source", value = "data") %>%
mutate(mapping = map(source, ~filter(var_names2, source == .))) %>%
hoist(mapping, from = "from", to = "to") %>%
mutate(output       = pmap(list(data, from, to), rename_cols),
# data_table   = map2(data, from, table_cols, useNA = "always"),
output_table = map2(output, to, table_cols, useNA = "always"),
validate     = map2_lgl(data_table, output_table, identical))
enframe(data_list, name = "source", value = "data")
var_names2
rename_cols <- function(.data, from, to) {
dplyr::rename(.data, !!!rlang::syms(discard(set_names(from, to), is.na(from))))
}
table_cols <- function(.data, cols, ...) {
purrr::map(cols, ~table(.data[[.x]]), ...)
}
#
remapped <-
enframe(data_list, name = "source", value = "data") %>%
mutate(mapping = map(source, ~filter(var_names2, source == .))) %>%
hoist(mapping, from = "from", to = "to") %>%
mutate(output       = pmap(list(data, from, to), rename_cols),
data_table   = map2(data, from, table_cols, useNA = "always"),
output_table = map2(output, to, table_cols, useNA = "always"),
validate     = map2_lgl(data_table, output_table, identical))
library(tidyverse)
set.seed(1234)
# sample dfs
data_0 <- tibble::tibble("X1" = sample(c(1, 2, 3, 4, NA_real_), 8, T),
"X2" = sample(c(100, 200, 300, 400, NA_real_), 8, T),
"X3" = sample(c("m", "f"), 8, T),
"tp" = "0") # timepoint
data_1 <- tibble::tibble("X1" = sample(c(100, 200, 300, 400, NA_real_), 8, T),
"X2" = sample(c("m", "f"), 8, T),
"X3" = sample(c(1, 2, 3, 4, NA_real_), 8, T),
"tp" = "1")
data_2 <- tibble::tibble("X3" = sample(c(1, 2, 3, 4, NA_real_), 8, T),
"X4" = sample(c("m", "f"), 8, T),
"tp" = "2")
# create df with matching variable names
var_names <- tibble::tibble(real_name = c("var1", "var2_salary", "var3_gender"),
name_0 = c("X1", "X2", "X3"),
name_1 = c("X3", "X1", "X2"),
name_2 = c("X3", NA_character_, "X4"))
# prepare the renaming -vectors
name_0 <- pull(var_names, name_0)
name_1 <- pull(var_names, name_1)
name_2 <- pull(var_names, name_2)
real_names <- pull(var_names, real_name)
# merge the dataframes and create a combined df
map2_dfr(list(data_0, data_1, data_2), list(name_0, name_1, name_2), function(tdf, names) {
real_names <- real_names[!is.na(names)]
names <- keep(names, function(v) !is.na(v))
tdf %>%
rename(!!!rlang::syms(set_names(names, real_names)))
}) -> comb_data
View(comb_data)
View(comb_data)
View(comb_data)
var_names %>%
rename(to = 1) %>%
pivot_longer(-to, names_to = "source", values_to = "from") %>%
select(source, from, to) -> var_names
View(var_names)
data_list <- list(data_0 = data_0, data_1 = data_1, data_2 = data_2)
rename_cols <- function(.data, from, to) {
dplyr::rename(.data, !!!rlang::syms(discard(set_names(from, to), is.na(from))))
}
table_cols <- function(.data, cols, ...) {
purrr::map(cols, ~table(.data[[.x]]), ...)
}
#
remapped <-
enframe(data_list, name = "source", value = "data") %>%
mutate(mapping = map(source, ~filter(var_names2, source == .))) %>%
hoist(mapping, from = "from", to = "to") %>%
mutate(output       = pmap(list(data, from, to), rename_cols),
data_table   = map2(data, from, table_cols, useNA = "always"),
output_table = map2(output, to, table_cols, useNA = "always"),
validate     = map2_lgl(data_table, output_table, identical))
#
remapped <-
enframe(data_list, name = "source", value = "data") %>%
mutate(mapping = map(source, ~filter(var_names, source == .))) %>%
hoist(mapping, from = "from", to = "to") %>%
mutate(output       = pmap(list(data, from, to), rename_cols),
data_table   = map2(data, from, table_cols, useNA = "always"),
output_table = map2(output, to, table_cols, useNA = "always"),
validate     = map2_lgl(data_table, output_table, identical))
#
remapped <-
enframe(data_list, name = "source", value = "data") %>%
mutate(mapping = map(source, ~filter(var_names, source == .))) %>%
hoist(mapping, from = "from", to = "to") %>%
mutate(output       = pmap(list(data, from, to), rename_cols),
data_table   = map2(data, from, table_cols, useNA = "always"),
output_table = map2(output, to, table_cols, useNA = "always"),
validate     = map2_lgl(data_table, output_table, identical))
devtools::install_version('rlang', version = '0.4.4', repos = "https://cran.r-project.org")
library(tidyverse)
set.seed(1234)
# sample dfs
data_0 <- tibble::tibble("X1" = sample(c(1, 2, 3, 4, NA_real_), 8, T),
"X2" = sample(c(100, 200, 300, 400, NA_real_), 8, T),
"X3" = sample(c("m", "f"), 8, T),
"tp" = "0") # timepoint
data_1 <- tibble::tibble("X1" = sample(c(100, 200, 300, 400, NA_real_), 8, T),
"X2" = sample(c("m", "f"), 8, T),
"X3" = sample(c(1, 2, 3, 4, NA_real_), 8, T),
"tp" = "1")
data_2 <- tibble::tibble("X3" = sample(c(1, 2, 3, 4, NA_real_), 8, T),
"X4" = sample(c("m", "f"), 8, T),
"tp" = "2")
# create df with matching variable names
var_names <- tibble::tibble(real_name = c("var1", "var2_salary", "var3_gender"),
name_0 = c("X1", "X2", "X3"),
name_1 = c("X3", "X1", "X2"),
name_2 = c("X3", NA_character_, "X4"))
library(dplyr)
library(tibble)
library(purrr)
library(rlang)
set.seed(1234)
# sample dfs
data_0 <- tibble::tibble("X1" = sample(c(1, 2, 3, 4, NA_real_), 8, T),
"X2" = sample(c(100, 200, 300, 400, NA_real_), 8, T),
"X3" = sample(c("m", "f"), 8, T),
"tp" = "0") # timepoint
data_1 <- tibble::tibble("X1" = sample(c(100, 200, 300, 400, NA_real_), 8, T),
"X2" = sample(c("m", "f"), 8, T),
"X3" = sample(c(1, 2, 3, 4, NA_real_), 8, T),
"tp" = "1")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(tidyverse)
set.seed(1234)
# sample dfs
data_0 <- tibble::tibble("X1" = sample(c(1, 2, 3, 4, NA_real_), 8, T),
"X2" = sample(c(100, 200, 300, 400, NA_real_), 8, T),
"X3" = sample(c("m", "f"), 8, T),
"tp" = "0") # timepoint
data_1 <- tibble::tibble("X1" = sample(c(100, 200, 300, 400, NA_real_), 8, T),
"X2" = sample(c("m", "f"), 8, T),
"X3" = sample(c(1, 2, 3, 4, NA_real_), 8, T),
"tp" = "1")
data_2 <- tibble::tibble("X3" = sample(c(1, 2, 3, 4, NA_real_), 8, T),
"X4" = sample(c("m", "f"), 8, T),
"tp" = "2")
# create df with matching variable names
var_names <- tibble::tibble(real_name = c("var1", "var2_salary", "var3_gender"),
name_0 = c("X1", "X2", "X3"),
name_1 = c("X3", "X1", "X2"),
name_2 = c("X3", NA_character_, "X4"))
# prepare the renaming -vectors
name_0 <- pull(var_names, name_0)
name_1 <- pull(var_names, name_1)
name_2 <- pull(var_names, name_2)
real_names <- pull(var_names, real_name)
# merge the dataframes and create a combined df
map2_dfr(list(data_0, data_1, data_2), list(name_0, name_1, name_2), function(tdf, names) {
real_names <- real_names[!is.na(names)]
names <- keep(names, function(v) !is.na(v))
tdf %>%
rename(!!!rlang::syms(set_names(names, real_names)))
}) -> comb_data
# create df with matching variable names
var_names2 <-
tibble::tibble(to = c("var1", "var2_salary", "var3_gender"),
data_0    = c("X1", "X2", "X3"),
data_1    = c("X3", "X1", "X2"),
data_2    = c("X3", NA_character_, "X4")) %>%
pivot_longer(-to, names_to = "source", values_to = "from") %>%
select(source, from, to)
var_names %>%
rename(to = 1) %>%
pivot_longer(-to, names_to = "source", values_to = "from") %>%
select(source, from, to) -> var_names
data_list <- list(data_0 = data_0, data_1 = data_1, data_2 = data_2)
rename_cols <- function(.data, from, to) {
dplyr::rename(.data, !!!rlang::syms(discard(set_names(from, to), is.na(from))))
}
table_cols <- function(.data, cols, ...) {
purrr::map(cols, ~table(.data[[.x]]), ...)
}
#
remapped <-
enframe(data_list, name = "source", value = "data") %>%
mutate(mapping = map(source, ~filter(var_names, source == .))) %>%
hoist(mapping, from = "from", to = "to") %>%
mutate(output       = pmap(list(data, from, to), rename_cols),
data_table   = map2(data, from, table_cols, useNA = "always"),
output_table = map2(output, to, table_cols, useNA = "always"),
validate     = map2_lgl(data_table, output_table, identical))
sessionInfo()
reprex:::reprex_addin()
library(tidyverse)
set.seed(1234)
# sample dfs
data_0 <- tibble::tibble("X1" = sample(c(1, 2, 3, 4, NA_real_), 8, T),
"X2" = sample(c(100, 200, 300, 400, NA_real_), 8, T),
"X3" = sample(c("m", "f"), 8, T),
"tp" = "0") # timepoint
data_1 <- tibble::tibble("X1" = sample(c(100, 200, 300, 400, NA_real_), 8, T),
"X2" = sample(c("m", "f"), 8, T),
"X3" = sample(c(1, 2, 3, 4, NA_real_), 8, T),
"tp" = "1")
data_2 <- tibble::tibble("X3" = sample(c(1, 2, 3, 4, NA_real_), 8, T),
"X4" = sample(c("m", "f"), 8, T),
"tp" = "2")
View(data_0)
View(data_1)
View(data_2)
# create df with matching variable names
var_names <- tibble::tibble(real_name = c("var1", "var2_salary", "var3_gender"),
name_0 = c("X1", "X2", "X3"),
name_1 = c("X3", "X1", "X2"),
name_2 = c("X3", NA_character_, "X4"))
View(var_names)
var_names %>%
rename(to = 1) %>%
pivot_longer(-to, names_to = "source", values_to = "from") %>%
select(source, from, to) -> var_names
View(var_names)
data_list <- list(data_0 = data_0, data_1 = data_1, data_2 = data_2)
rename_cols <- function(.data, from, to) {
dplyr::rename(.data, !!!rlang::syms(discard(set_names(from, to), is.na(from))))
}
table_cols <- function(.data, cols, ...) {
purrr::map(cols, ~table(.data[[.x]]), ...)
}
remapped <-
enframe(data_list, name = "source", value = "data") %>%
mutate(mapping = map(source, ~filter(var_names, source == .))) %>%
hoist(mapping, from = "from", to = "to") %>%
mutate(output       = pmap(list(data, from, to), rename_cols),
data_table   = map2(data, from, table_cols, useNA = "always"),
output_table = map2(output, to, table_cols, useNA = "always"),
validate     = map2_lgl(data_table, output_table, identical))
View(var_names)
var_names %>%
rename(to = 1) %>%
pivot_longer(-to, names_to = "source", values_to = "from") %>%
select(source, from, to) %>% drop_na() -> var_names
var_names %>%
rename(to = 1) %>%
pivot_longer(-to, names_to = "source", values_to = "from") %>%
select(source, from, to) %>% drop_na() -> var_names
# create df with matching variable names
var_names <- tibble::tibble(real_name = c("var1", "var2_salary", "var3_gender"),
name_0 = c("X1", "X2", "X3"),
name_1 = c("X3", "X1", "X2"),
name_2 = c("X3", NA_character_, "X4"))
var_names %>%
rename(to = 1) %>%
pivot_longer(-to, names_to = "source", values_to = "from") %>%
select(source, from, to) %>% drop_na() -> var_names
data_list <- list(data_0 = data_0, data_1 = data_1, data_2 = data_2)
rename_cols <- function(.data, from, to) {
dplyr::rename(.data, !!!rlang::syms(discard(set_names(from, to), is.na(from))))
}
table_cols <- function(.data, cols, ...) {
purrr::map(cols, ~table(.data[[.x]]), ...)
}
remapped <-
enframe(data_list, name = "source", value = "data") %>%
mutate(mapping = map(source, ~filter(var_names, source == .))) %>%
hoist(mapping, from = "from", to = "to") %>%
mutate(output       = pmap(list(data, from, to), rename_cols),
data_table   = map2(data, from, table_cols, useNA = "always"),
output_table = map2(output, to, table_cols, useNA = "always"),
validate     = map2_lgl(data_table, output_table, identical))
View(var_names)
# create df with matching variable names
var_names2 <-
tibble::tibble(to = c("var1", "var2_salary", "var3_gender"),
data_0    = c("X1", "X2", "X3"),
data_1    = c("X3", "X1", "X2"),
data_2    = c("X3", NA_character_, "X4")) %>%
pivot_longer(-to, names_to = "source", values_to = "from") %>%
select(source, from, to)
View(var_names2)
# create df with matching variable names
var_names2 <-
tibble::tibble(to = c("var1", "var2_salary", "var3_gender"),
data_0    = c("X1", "X2", "X3"),
data_1    = c("X3", "X1", "X2"),
data_2    = c("X3", NA_character_, "X4")) %>%
pivot_longer(-to, names_to = "source", values_to = "from") %>%
select(source, from, to) %>% drop_na()
# create df with matching variable names
var_names2 <-
tibble::tibble(to = c("var1", "var2_salary", "var3_gender"),
data_0    = c("X1", "X2", "X3"),
data_1    = c("X3", "X1", "X2"),
data_2    = c("X3", NA_character_, "X4")) %>%
pivot_longer(-to, names_to = "source", values_to = "from") %>%
select(source, from, to) %>% drop_na()
data_list <- list(data_0 = data_0, data_1 = data_1, data_2 = data_2)
rename_cols <- function(.data, from, to) {
dplyr::rename(.data, !!!rlang::syms(discard(set_names(from, to), is.na(from))))
}
table_cols <- function(.data, cols, ...) {
purrr::map(cols, ~table(.data[[.x]]), ...)
}
remapped <-
enframe(data_list, name = "source", value = "data") %>%
mutate(mapping = map(source, ~filter(var_names, source == .))) %>%
hoist(mapping, from = "from", to = "to") %>%
mutate(output       = pmap(list(data, from, to), rename_cols),
data_table   = map2(data, from, table_cols, useNA = "always"),
output_table = map2(output, to, table_cols, useNA = "always"),
validate     = map2_lgl(data_table, output_table, identical))
# sample dfs
data_0 <- tibble::tibble("X1" = sample(c(1, 2, 3, 4, NA_real_), 8, T),
"X2" = sample(c(100, 200, 300, 400, NA_real_), 8, T),
"X3" = sample(c("m", "f"), 8, T),
"tp" = "0") # timepoint
data_1 <- tibble::tibble("X1" = sample(c(100, 200, 300, 400, NA_real_), 8, T),
"X2" = sample(c("m", "f"), 8, T),
"X3" = sample(c(1, 2, 3, 4, NA_real_), 8, T),
"tp" = "1")
data_2 <- tibble::tibble("X3" = sample(c(1, 2, 3, 4, NA_real_), 8, T),
"X4" = sample(c("m", "f"), 8, T),
"tp" = "2")
# create df with matching variable names
var_names <- tibble::tibble(real_name = c("var1", "var2_salary", "var3_gender"),
name_0 = c("X1", "X2", "X3"),
name_1 = c("X3", "X1", "X2"),
name_2 = c("X3", NA_character_, "X4"))
# prepare the renaming -vectors
name_0 <- pull(var_names, name_0)
name_1 <- pull(var_names, name_1)
name_2 <- pull(var_names, name_2)
real_names <- pull(var_names, real_name)
# merge the dataframes and create a combined df
map2_dfr(list(data_0, data_1, data_2), list(name_0, name_1, name_2), function(tdf, names) {
real_names <- real_names[!is.na(names)]
names <- keep(names, function(v) !is.na(v))
tdf %>%
rename(!!!rlang::syms(set_names(names, real_names)))
}) -> comb_data
View(comb_data)
